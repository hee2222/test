/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/SK_Actions.glb 
*/

import React, { useRef, useEffect, useState } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { useControls } from 'leva';
import * as THREE from 'three';

export function Model({ onTargetIndexUpdate, ...props }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('./models/SK_Actions.glb');
  const { actions } = useAnimations(animations, group);
  const { animation } = useControls({
    animation: { value: 'Flying_Action', options: Object.keys(actions) },
  });

  useEffect(() => {
    if (
      actions[animation] == actions['Enter_Right_Action'] ||
      actions[animation] == actions['Enter_Left_Action']
    ) {
      actions?.['CapeAction']?.stop();
      actions?.['Flying_Action']?.stop();
      actions?.['Leg_Action']?.stop();
      actions[animation].reset().fadeIn(0.5).play();

      actions[animation].setLoop(THREE.LoopRepeat, 1);
      actions[animation].clampWhenFinished = true;
    } else if (actions[animation] == actions['Flying_Action']) {
      actions[animation].clampWhenFinished = true;
      actions['CapeAction'].play();
      actions?.['Flying_Action'].play();
      actions?.['Leg_Action'].play();
    }

    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" position={[0, 0.181, -0.511]} scale={1.052}>
          <primitive object={nodes.body} />
          <skinnedMesh
            name="arm"
            geometry={nodes.arm.geometry}
            material={materials['wire_229154215.001']}
            skeleton={nodes.arm.skeleton}
          />
          <group name="캐릭터">
            <skinnedMesh
              name="캐릭터_1"
              geometry={nodes.캐릭터_1.geometry}
              material={materials.wire_153228153}
              skeleton={nodes.캐릭터_1.skeleton}
            />
            <skinnedMesh
              name="캐릭터_2"
              geometry={nodes.캐릭터_2.geometry}
              material={materials.wire_087225198}
              skeleton={nodes.캐릭터_2.skeleton}
            />
            <skinnedMesh
              name="캐릭터_3"
              geometry={nodes.캐릭터_3.geometry}
              material={materials.wire_008061138}
              skeleton={nodes.캐릭터_3.skeleton}
            />
            <skinnedMesh
              name="캐릭터_4"
              geometry={nodes.캐릭터_4.geometry}
              material={materials.wire_028149177}
              skeleton={nodes.캐릭터_4.skeleton}
            />
          </group>
          <skinnedMesh
            name="캐릭터002"
            geometry={nodes.캐릭터002.geometry}
            material={materials.wire_176026026}
            skeleton={nodes.캐릭터002.skeleton}
          />
          <skinnedMesh
            name="캐릭터003"
            geometry={nodes.캐릭터003.geometry}
            material={materials['Material.001']}
            skeleton={nodes.캐릭터003.skeleton}
          />
          <skinnedMesh
            name="캐릭터004"
            geometry={nodes.캐릭터004.geometry}
            material={materials.wire_229154215}
            skeleton={nodes.캐릭터004.skeleton}
          />
          <skinnedMesh
            name="캐릭터005"
            geometry={nodes.캐릭터005.geometry}
            material={materials.wire_229154215}
            skeleton={nodes.캐릭터005.skeleton}
          />
          <skinnedMesh
            name="캐릭터006"
            geometry={nodes.캐릭터006.geometry}
            material={materials['Material.002']}
            skeleton={nodes.캐릭터006.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('./models/SK_Actions.glb');
